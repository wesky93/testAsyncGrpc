import argparse
import asyncio
import logging

import aioboto3

# generated by protoc
import grpc

import AwsAPI_pb2
import AwsAPI_pb2_grpc


class S3(AwsAPI_pb2_grpc.S3Servicer):

    async def GetObjects(self, request, context):
        session = aioboto3.Session()
        async with session.resource('s3',region_name=request.region) as s3resource:
            bucket = await s3resource.Bucket(request.bucket)
            async for obj in bucket.objects.limit(50):
                etag = await obj.e_tag
                yield AwsAPI_pb2.ObjectReply(name=obj.key, etag=etag)
            print('request done')





def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--loop', '-l', type=str, dest='loop', default='asyncio')
    return parser.parse_args()

async def serve():
    server = grpc.aio.server()
    AwsAPI_pb2_grpc.add_S3Servicer_to_server(S3(), server)
    server.add_insecure_port('[::]:50051')
    await server.start()
    await server.wait_for_termination()

if __name__ == '__main__':
    logging.basicConfig()
    args = get_args()
    if args.loop == 'uvloop':
        print('use uvloop!')
        import uvloop

        uvloop.install()
    asyncio.run(serve())
