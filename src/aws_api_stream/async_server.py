import argparse
import asyncio
import logging

# generated by protoc
import AwsAPI_grpc
import AwsAPI_pb2
import aioboto3
from grpclib.server import Server, Stream
from grpclib.utils import graceful_exit


class S3(AwsAPI_grpc.S3Base):

    async def GetObjects(self, stream: Stream):
        request = await stream.recv_message()
        async with aioboto3.resource('s3') as s3resource:
            bucket = await s3resource.Bucket(request.bucket)
            async for obj in bucket.objects.all():
                etag = await obj.e_tag
                await stream.send_message(AwsAPI_pb2.ObjectReply(name=obj.key, etag=etag))


async def main(*, host='127.0.0.1', port=50051):
    server = Server([S3()])
    with graceful_exit([server]):
        await server.start(host, port)
        print(f'Serving on {host}:{port}')
        await server.wait_closed()


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--loop', '-l', type=str, required=True, dest='loop', default='asyncio')
    return parser.parse_args()


if __name__ == '__main__':
    logging.basicConfig()
    args = get_args()
    if args.loop == 'uvloop':
        import uvloop

        uvloop.install()
    asyncio.run(main())
