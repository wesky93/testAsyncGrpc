import argparse
import asyncio
import logging

import aioboto3
from grpclib.server import Server
from grpclib.utils import graceful_exit
# generated by protoc
import AwsAPI_pb2
import AwsAPI_grpc


class S3(AwsAPI_grpc.S3Base):

    async def GetObjects(self, stream):
        request = await stream.recv_message()
        total_count = 0
        async with aioboto3.Session() as session:
            async with session.resource('s3') as s3resource:
                bucket = await s3resource.Bucket(request.bucket)
                async for s3_object in bucket.objects.all():
                    print(s3_object)
                    total_count += 1
        print(total_count)
        await stream.send_message(AwsAPI_pb2.ObjectReply(count=total_count))


async def main(*, host='127.0.0.1', port=50051):
    server = Server([S3()])
    with graceful_exit([server]):
        await server.start(host, port)
        print(f'Serving on {host}:{port}')
        await server.wait_closed()


def get_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('--loop', '-l', type=str,  dest='loop', default='asyncio')
    return parser.parse_args()


if __name__ == '__main__':
    logging.basicConfig()
    args = get_args()
    if args.loop == 'uvloop':
        import uvloop

        uvloop.install()
    asyncio.run(main())